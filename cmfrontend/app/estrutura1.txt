.
├── (tabs)
│   ├── _layout.tsx
│   ├── configuracoes.tsx
│   ├── inicio.tsx
│   ├── perfil.tsx
│   └── rotas.tsx
├── +not-found.tsx
├── _layout.tsx
├── codes.txt
├── estrutura1.txt
├── index.tsx
├── logerroexpo.txt
├── pedaladas
│   ├── em-tempo-real.tsx
│   ├── index.tsx
│   └── resumo.tsx
├── rotas
└── usuarios
    ├── cadastro.tsx
    ├── index.tsx
    └── login.tsx

4 directories, 17 files


---------------------------------------------- app/+not-found.tsx -----------------------------------------------------
import { Link, Stack } from 'expo-router';
import { StyleSheet } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">This screen doesn't exist.</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">Go to home screen!</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

---------------------------------------------- app/_layout.tsx -----------------------------------------------------
import { Slot } from 'expo-router';
import Toast from 'react-native-toast-message';
import { AuthProvider } from '../context/AuthContext'; // <-- importa o contexto

export default function Layout() {
    return (
        <AuthProvider>
            <Slot />
            <Toast />
        </AuthProvider>
    );
}

---------------------------------------------- app/index.tsx -----------------------------------------------------
import { useEffect, useState } from 'react';
import { View, Text, ActivityIndicator, Animated, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
import { useAuth } from '../context/AuthContext';

export default function Inicio() {
    const router = useRouter();
    const { isAuthenticated } = useAuth();
    const [fadeAnim] = useState(new Animated.Value(0));

    useEffect(() => {
        // animação de fade-in
        Animated.timing(fadeAnim, {
            toValue: 1,
            duration: 600,
            useNativeDriver: true,
        }).start();

        const timeout = setTimeout(() => {
            if (isAuthenticated) {
                router.replace('../(tabs)/inicio');
            } else {
                router.replace('/usuarios');
            }
        }, 1000); // tempo de exibição do splash

        return () => clearTimeout(timeout);
    }, [isAuthenticated]);

    return (
        <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
            <Text style={styles.logo}>CicloMobi</Text>
            <ActivityIndicator size="large" color="#fff" />
        </Animated.View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, backgroundColor: '#1E1E6F', justifyContent: 'center', alignItems: 'center' },
    logo: { fontSize: 36, color: '#fff', fontWeight: 'bold', marginBottom: 20 },
});

---------------------------------------------- app/(tabs)/_layout.tsx -----------------------------------------------------
import { Tabs } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import React from 'react';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        headerShown: false,
        tabBarActiveTintColor: '#FF6EC7',
        tabBarInactiveTintColor: '#ffffff',
        tabBarStyle: {
          backgroundColor: '#a264df',
          height: 60,
          paddingBottom: 5,
        },
        tabBarLabelStyle: {
          fontSize: 12,
        },
      }}
    >
      <Tabs.Screen
        name="inicio"
        options={{
          title: 'Início',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="home" size={size} color={color} />
          ),
        }}
      />

      <Tabs.Screen
        name="rotas"
        options={{
          title: 'Rotas',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="bicycle" size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="perfil"
        options={{
          title: 'Perfil',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="person" size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="configuracoes"
        options={{
          title: 'Configurações',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="settings" size={size} color={color} />
          ),
        }}
      />
    </Tabs>
  );
}

---------------------------------------------- app/(tabs)/configuracoes.tsx -----------------------------------------------------
import { View, Text, TouchableOpacity, StyleSheet, Alert, ImageBackground } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from '../../context/AuthContext';
import { useRouter } from 'expo-router';
import { BlurView } from 'expo-blur';

export default function Configuracoes() {
    const { logout } = useAuth();
    const router = useRouter();

    const handleLogout = () => {
        Alert.alert(
            'Sair',
            'Deseja realmente sair da conta?',
            [
                { text: 'Cancelar', style: 'cancel' },
                {
                    text: 'Sair',
                    onPress: async () => {
                        await logout();
                        router.replace('/usuarios/login');
                    },
                    style: 'destructive',
                },
            ],
            { cancelable: true }
        );
    };

    return (
        <ImageBackground
            source={require('../../assets/icons/icon.png')}
            style={styles.bg}
            resizeMode="cover"
        >
            <BlurView intensity={40} tint="dark" style={StyleSheet.absoluteFill} />
            <View style={styles.overlay}>
                <Text style={styles.title}>Configurações</Text>

                <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
                    <Ionicons name="log-out-outline" size={20} color="#fff" />
                    <Text style={styles.logoutText}>Sair da Conta</Text>
                </TouchableOpacity>
            </View>
        </ImageBackground>
    );

}

const styles = StyleSheet.create({
    bg: { flex: 1, justifyContent: 'center' },
    overlay: {
        flex: 1,
        backgroundColor: 'rgba(0,0,0,0.35)',
        justifyContent: 'flex-start',
        alignItems: 'center',
        paddingTop: 60,
        paddingHorizontal: 20,
    },
    title: {
        fontSize: 24,
        color: '#fff',
        marginBottom: 40,
        fontWeight: 'bold',
    },
    logoutButton: {
        flexDirection: 'row',
        backgroundColor: '#a264df',
        paddingVertical: 14,
        paddingHorizontal: 20,
        borderRadius: 12,
        alignItems: 'center',
    },
    logoutText: {
        color: '#fff',
        fontSize: 16,
        marginLeft: 10,
        fontWeight: 'bold',
    },
});

---------------------------------------------- app/(tabs)/inicio.tsx -----------------------------------------------------
// app/(tabs)/index.tsx
import React, { useEffect, useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ImageBackground, Dimensions } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import * as Location from 'expo-location';
import MapView, { Marker } from 'react-native-maps';
import { useRouter } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { BlurView } from 'expo-blur';

const API_KEY = '1d5da22be50ae8af1720d8c9376a501e';

export default function Inicio() {
  const [weather, setWeather] = useState<any>(null);
  const [location, setLocation] = useState<{ latitude: number; longitude: number } | null>(null);
  const [userName, setUserName] = useState<string>('Visitante');
  const router = useRouter();

  const fetchWeather = async (latitude: number, longitude: number) => {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=pt_br`
      );
      const data = await response.json();
      if (data.cod === 200) setWeather(data);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    (async () => {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        alert('Permissão de localização negada!');
        return;
      }

      const loc = await Location.getCurrentPositionAsync({});
      setLocation({ latitude: loc.coords.latitude, longitude: loc.coords.longitude });
      fetchWeather(loc.coords.latitude, loc.coords.longitude);

      const storedName = await AsyncStorage.getItem('userName');
      setUserName(storedName || 'Visitante');
    })();
  }, []);

  return (
    <ImageBackground
      source={require('../../assets/icons/icon.png')}
      style={styles.bg}
      resizeMode="cover"
    >
      <BlurView intensity={40} tint="dark" style={StyleSheet.absoluteFill} />
      <View style={styles.overlay}>
        <Text style={styles.header}>{`Bem-vindo ao CicloMobi, ${userName}!`}</Text>

        {weather && (
          <View style={styles.weatherBox}>
            <Ionicons
              name={weather.weather[0].main === 'Clear' ? 'sunny' : 'cloudy'}
              size={30}
              color="#fff"
            />
            <View style={styles.weatherDetails}>
              <Text style={styles.weatherText}>{`Local: ${weather.name}`}</Text>
              <Text style={styles.weatherText}>{`Temperatura: ${Math.round(weather.main.temp)}°C`}</Text>
              <Text style={styles.weatherText}>{`Descrição: ${weather.weather[0].description}`}</Text>
            </View>
          </View>
        )}

        {location && (
          <View style={styles.mapWrapper}>
            <MapView
              style={StyleSheet.absoluteFillObject}
              initialRegion={{
                latitude: location.latitude,
                longitude: location.longitude,
                latitudeDelta: 0.01,
                longitudeDelta: 0.01,
              }}
            >
              <Marker
                coordinate={{ latitude: location.latitude, longitude: location.longitude }}
                title="Você está aqui"
                pinColor="#FF6B35"
              />
            </MapView>

            <TouchableOpacity
              style={styles.startButtonOnMap}
              onPress={() => router.push('/pedaladas')}
            >
              <Ionicons name="bicycle" size={20} color="#fff" />
              <Text style={styles.startText}>Iniciar Pedalada</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
    </ImageBackground>
  );
}

const { height } = Dimensions.get('window');

const styles = StyleSheet.create({
  bg: { flex: 1, justifyContent: 'center' },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.35)',
    justifyContent: 'flex-start',
    alignItems: 'center',
    paddingTop: 60,
    paddingHorizontal: 20,
  },
  header: { fontSize: 20, fontWeight: 'bold', color: '#fff', marginBottom: 10, textAlign: 'center' },
  weatherBox: {
    backgroundColor: 'rgba(162, 0, 202, 0.1)',
    padding: 12,
    borderRadius: 12,
    width: '100%',
    marginBottom: 7,
    alignItems: 'flex-start',
  },
  weatherDetails: { alignItems: 'flex-start' },
  weatherText: { fontSize: 14, color: '#fff' },
  mapWrapper: {
    width: '100%',
    height: height * 0.59,
    borderRadius: 20,
    overflow: 'hidden',
    position: 'relative',
    marginBottom: 25,
    backgroundColor: '#eee',
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 6,
    elevation: 5,
  },
  startButtonOnMap: {
    position: 'absolute',
    bottom: 20,
    alignSelf: 'center',
    backgroundColor: '#a264df',
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 30,
    elevation: 6,
  },
  startText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16,
    marginLeft: 10,
  },
});

---------------------------------------------- app/(tabs)/perfil.tsx -----------------------------------------------------
import { View, Text } from 'react-native';

export default function Perfil() {
    return (
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
            <Text>Tela de perfil</Text>
        </View>
    );
}

---------------------------------------------- app/(tabs)/rotas.tsx -----------------------------------------------------
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, ImageBackground } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { colors } from '../../constants/colors';
import { BlurView } from 'expo-blur';

export default function Rotas() {
    const router = useRouter();

    return (
        <ImageBackground
            source={require('../../assets/icons/icon.png')}
            style={styles.bg}
            resizeMode="cover"
        >
            <BlurView intensity={40} tint="dark" style={StyleSheet.absoluteFill} />
            <ScrollView contentContainerStyle={styles.container}>
                <Text style={styles.title}>Minhas Rotas</Text>

                <TouchableOpacity style={styles.card} activeOpacity={0.7} onPress={() => router.push('/rotas-favoritas')}>
                    <Ionicons name="heart" size={24} color={colors.textPrimary} />
                    <Text style={styles.cardText}>Rotas Favoritas</Text>
                </TouchableOpacity>

                <TouchableOpacity style={styles.card} activeOpacity={0.7} onPress={() => router.push('/historico')}>
                    <Ionicons name="time" size={24} color={colors.textPrimary} />
                    <Text style={styles.cardText}>Histórico de Rotas</Text>
                </TouchableOpacity>

                <TouchableOpacity style={styles.card} activeOpacity={0.7} onPress={() => router.push('/nova-rota')}>
                    <Ionicons name="add-circle" size={24} color={colors.textPrimary} />
                    <Text style={styles.cardText}>Nova Rota</Text>
                </TouchableOpacity>

                <TouchableOpacity style={styles.card} activeOpacity={0.7} onPress={() => router.push('/rotas-populares')}>
                    <Ionicons name="flame" size={24} color={colors.textPrimary} />
                    <Text style={styles.cardText}>Rotas Populares</Text>
                </TouchableOpacity>
            </ScrollView>
        </ImageBackground>
    );
}

const styles = StyleSheet.create({
    bg: { flex: 1, justifyContent: 'center' },
    container: {
        flex: 1,
        backgroundColor: 'rgba(0,0,0,0.35)',
        justifyContent: 'flex-start',
        alignItems: 'center',
        paddingTop: 60,
        paddingHorizontal: 20,

    },
    title: {
        fontSize: 24,
        color: colors.textPrimary,
        fontWeight: 'bold',
        marginBottom: 20,
        textAlign: 'center',
    },
    card: {
        width: '90%',
        backgroundColor: colors.primary,
        padding: 20,
        borderRadius: 12,
        marginBottom: 15,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'flex-start',
    },
    cardText: {
        fontSize: 16,
        color: colors.textPrimary,
        marginLeft: 12,
        flexShrink: 1,
    },
});

---------------------------------------------- app/pedaladas/em-tempo-real.tsx -----------------------------------------------------
// app/pedaladas/em-tempo-real.tsx
// Importações principais do React e bibliotecas auxiliares
import React, { useEffect, useRef, useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Dimensions } from 'react-native';
import MapView, { Marker, Polyline } from 'react-native-maps';
import * as Location from 'expo-location';
import { useRouter } from 'expo-router';
import { getDistance } from 'geolib';

export default function PedaladaTempoReal() {
    // Estado que armazena a última localização do usuário
    const [location, setLocation] = useState<Location.LocationObjectCoords | null>(null);
    // Array de coordenadas da rota que será traçada no mapa
    const [routeCoordinates, setRouteCoordinates] = useState<{ latitude: number; longitude: number }[]>([]);
    // Armazena o timestamp de quando a pedalada foi iniciada
    const [startTime, setStartTime] = useState<number | null>(null);
    // Tempo decorrido em segundos desde o início da pedalada
    const [elapsedTime, setElapsedTime] = useState(0);
    // Referência para o objeto que observa a posição
    const [watcher, setWatcher] = useState<Location.LocationSubscription | null>(null);
    // Referência para o mapa (pode ser usada para animações futuras)
    const [distanceTotal, setDistanceTotal] = useState(0);
    const [modoTesteManual, setModoTesteManual] = useState(false);
    const mapRef = useRef<MapView | null>(null);
    // Referência para o temporizador
    const timerRef = useRef<NodeJS.Timeout | null>(null);
    // Roteador do Expo Router para navegação
    const router = useRouter();
    // Solicita permissão e obtém a localização inicial do usuário
    useEffect(() => {
        (async () => {
            const { status } = await Location.requestForegroundPermissionsAsync();
            if (status !== 'granted') {
                alert('Permissão de localização negada');
                return;
            }
            const current = await Location.getCurrentPositionAsync({});
            setLocation(current.coords);
        })();
    }, []);
    // Formata o tempo (segundos) em mm:ss
    const formatTime = (seconds: number) => {
        const m = Math.floor(seconds / 60).toString().padStart(2, '0');
        const s = (seconds % 60).toString().padStart(2, '0');
        return `${m}:${s}`;
    };
    // Inicia a pedalada: grava localização e tempo
    const iniciarPedalada = async () => {
        const start = Date.now();
        setStartTime(start);
        setElapsedTime(0);
        setDistanceTotal(0);
        setRouteCoordinates([]);
        // Inicia o rastreamento da posição em tempo real
        const locWatcher = await Location.watchPositionAsync(
            { accuracy: Location.Accuracy.High, timeInterval: 1000, distanceInterval: 1 },
            (loc) => {
                if (!modoTesteManual) {
                    const coords = loc.coords;
                    const newPoint = { latitude: coords.latitude, longitude: coords.longitude };

                    setRouteCoordinates((prev) => {
                        const updated = [...prev, newPoint];
                        if (prev.length > 0) {
                            const dist = getDistance(prev[prev.length - 1], newPoint);
                            setDistanceTotal((d) => d + dist);
                        }
                        return updated;
                    });

                    setLocation(coords);
                }
            }
        );
        setWatcher(locWatcher);

        if (timerRef.current) clearInterval(timerRef.current);
        timerRef.current = setInterval(() => {
            setElapsedTime(Math.floor((Date.now() - start) / 1000));
        }, 1000);
    };

    const finalizarPedalada = () => {
        if (watcher) watcher.remove();
        if (timerRef.current) clearInterval(timerRef.current);
        setWatcher(null);
        setStartTime(null);

        // Redireciona para a tela de resumo com dados reais
        router.push({
            pathname: '/pedaladas/resumo',
            params: {
                tempo: formatTime(elapsedTime),
                distancia: (distanceTotal / 1000).toFixed(2),
                pontos: routeCoordinates.length.toString(),
            },
        });
    };
    // Clique manual no mapa: continua do último ponto traçado
    const handleManualPress = (e: any) => {
        if (!modoTesteManual) return;
        const newCoord = e.nativeEvent.coordinate;

        setRouteCoordinates((prev) => {
            const updated = [...prev, newCoord];
            if (prev.length > 0) {
                const dist = getDistance(prev[prev.length - 1], newCoord);
                setDistanceTotal((d) => d + dist);
            }
            return updated;
        });
    };

    return (
        <View style={styles.container}>
            {location && (
                <MapView
                    ref={mapRef}
                    style={styles.map}
                    initialRegion={{
                        latitude: location.latitude,
                        longitude: location.longitude,
                        latitudeDelta: 0.01,
                        longitudeDelta: 0.01,
                    }}
                    showsUserLocation={!modoTesteManual} // esconde ícone se modo teste estiver ativo
                    followsUserLocation={!modoTesteManual}
                    onPress={handleManualPress}
                >
                    <Polyline coordinates={routeCoordinates} strokeWidth={4} strokeColor="#a264df" />
                    {/* marcador aparece na última posição traçada */}
                    {routeCoordinates.length > 0 && (
                        <Marker coordinate={routeCoordinates[routeCoordinates.length - 1]} title="Último ponto" />
                    )}
                </MapView>
            )}

            <View style={styles.infoBox}>
                <Text style={styles.time}>⏱️ {formatTime(elapsedTime)}</Text>
                <Text style={styles.time}>📏 {(distanceTotal / 1000).toFixed(2)} km</Text>
            </View>

            <View style={styles.controls}>
                <TouchableOpacity style={styles.button} onPress={iniciarPedalada}>
                    <Text style={styles.buttonText}>Iniciar</Text>
                </TouchableOpacity>
                <TouchableOpacity style={[styles.button, { backgroundColor: '#d9534f' }]} onPress={finalizarPedalada}>
                    <Text style={styles.buttonText}>Finalizar</Text>
                </TouchableOpacity>
            </View>

            {/* Botão flutuante para alternar o modo teste manual */}
            <View
                style={{
                    position: 'absolute',
                    // 🔧 Altere aqui para mudar a posição do botão de modo teste:
                    top: 5, // 👉 ajuste vertical
                    left: 10, // 👉 ajuste horizontal (pode trocar por 'left')
                }}
            >
                <TouchableOpacity
                    onPress={() => setModoTesteManual(!modoTesteManual)}
                    style={{ backgroundColor: '#444', padding: 10, borderRadius: 10 }}
                >
                    <Text style={{ color: '#fff', fontSize: 12 }}>
                        {modoTesteManual ? 'Desativar' : 'Modo Teste Manual'}
                    </Text>
                </TouchableOpacity>
            </View>
        </View>
    );
}

const { height } = Dimensions.get('window');

const styles = StyleSheet.create({
    container: { flex: 1 },
    map: { flex: 1 },
    infoBox: {
        position: 'absolute',
        top: 40,
        alignSelf: 'center',
        backgroundColor: 'rgba(0,0,0,0.6)',
        padding: 12,
        borderRadius: 10,
    },
    time: {
        fontSize: 16,
        color: '#fff',
        fontWeight: 'bold',
        textAlign: 'center',
    },
    controls: {
        position: 'absolute',
        bottom: 30,
        left: 0,
        right: 0,
        flexDirection: 'row',
        justifyContent: 'space-around',
    },
    button: {
        backgroundColor: '#a264df',
        paddingVertical: 14,
        paddingHorizontal: 30,
        borderRadius: 12,
        elevation: 4,
    },
    buttonText: {
        color: '#fff',
        fontWeight: 'bold',
        fontSize: 16,
    },
});

---------------------------------------------- app/pedaladas/index.tsx -----------------------------------------------------
// app/pedaladas/index.tsx
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, ImageBackground } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { BlurView } from 'expo-blur';

export default function EscolherTipoPedalada() {
    const router = useRouter();

    const opcoes = [
        { label: 'Iniciar nova rota', icon: 'bicycle', path: '/pedaladas/em-tempo-real' },
        { label: 'Iniciar rota favorita', icon: 'heart', path: '/pedaladas/seguir?tipo=favorita' },
        { label: 'Iniciar rota personalizada', icon: 'map', path: '/pedaladas/personalizar' },
        { label: 'Iniciar rota já feita', icon: 'time', path: '/pedaladas/seguir?tipo=pessoal' },
        { label: 'Iniciar rota popular', icon: 'flame', path: '/pedaladas/seguir?tipo=popular' },
    ];

    return (
        <ImageBackground
            source={require('../../assets/icons/icon.png')}
            style={styles.bg}
            resizeMode="cover"
        >
            <BlurView intensity={40} tint="dark" style={StyleSheet.absoluteFill} />
            <ScrollView contentContainerStyle={styles.container}>
                <Text style={styles.title}>Escolha o tipo de pedalada</Text>

                {opcoes.map((opcao, index) => (
                    <TouchableOpacity
                        key={index}
                        style={styles.button}
                        onPress={() => router.push(opcao.path)}
                        activeOpacity={0.8}
                    >
                        <Ionicons name={opcao.icon as any} size={24} color="#fff" />
                        <Text style={styles.buttonText}>{opcao.label}</Text>
                    </TouchableOpacity>
                ))}
            </ScrollView>
        </ImageBackground>
    );
}

const styles = StyleSheet.create({
    bg: { flex: 1 },
    container: {
        flexGrow: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    title: {
        fontSize: 24,
        color: '#fff',
        fontWeight: 'bold',
        marginBottom: 30,
        textAlign: 'center',
    },
    button: {
        width: '90%',
        backgroundColor: '#a264df',
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'flex-start',
        padding: 18,
        borderRadius: 12,
        marginBottom: 16,
    },
    buttonText: {
        marginLeft: 12,
        fontSize: 16,
        color: '#fff',
        fontWeight: 'bold',
    },
});
---------------------------------------------- app/pedaladas/resumo.tsx -----------------------------------------------------
// app/pedaladas/resumo.tsx
import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Alert } from 'react-native';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';

export default function ResumoPedalada() {
    const { tempo, distancia, pontos } = useLocalSearchParams();
    const router = useRouter();
    const [pedaladaSalva, setPedaladaSalva] = useState(false);

    const salvarPedalada = () => {
        Alert.alert('Salvar Pedalada', 'Deseja salvar esta pedalada?', [
            {
                text: 'Cancelar',
                style: 'cancel',
            },
            {
                text: 'Salvar',
                onPress: () => {
                    setPedaladaSalva(true);
                    // Aqui iria o envio para o backend (mock):
                    // api.post('/pedaladas/registrar/', { tempo, distancia, pontos })
                    Alert.alert('Sucesso', 'Pedalada salva com sucesso!');
                },
            },
        ]);
    };

    const salvarRota = () => {
        Alert.alert('Salvar como Rota', 'Deseja salvar esta rota para reutilizar depois?', [
            {
                text: 'Cancelar',
                style: 'cancel',
            },
            {
                text: 'Salvar',
                onPress: () => {
                    // Aqui iria o envio para o backend (mock):
                    // api.post('/rotas/criar/', { nome: 'Minha Rota', coordenadas })
                    Alert.alert('Sucesso', 'Rota salva com sucesso!');
                },
            },
        ]);
    };

    return (
        <ScrollView contentContainerStyle={styles.container}>
            <Ionicons name="bicycle" size={64} color="#a264df" style={styles.icon} />
            <Text style={styles.titulo}>Resumo da Pedalada</Text>

            <View style={styles.caixaResumo}>
                <Text style={styles.label}>⏱️ Tempo total:</Text>
                <Text style={styles.valor}>{tempo}</Text>

                <Text style={styles.label}>📏 Distância percorrida:</Text>
                <Text style={styles.valor}>{distancia} km</Text>

                <Text style={styles.label}>📌 Pontos registrados:</Text>
                <Text style={styles.valor}>{pontos}</Text>
            </View>

            <TouchableOpacity style={styles.botao} onPress={salvarPedalada}>
                <Text style={styles.botaoTexto}>Salvar Pedalada</Text>
            </TouchableOpacity>

            {pedaladaSalva && (
                <TouchableOpacity style={[styles.botao, { backgroundColor: '#5fa264' }]} onPress={salvarRota}>
                    <Text style={styles.botaoTexto}>Salvar como Rota</Text>
                </TouchableOpacity>
            )}

            <TouchableOpacity style={[styles.botao, { marginTop: 20 }]} onPress={() => router.push('/(tabs)/inicio')}>
                <Text style={styles.botaoTexto}>Voltar ao Início</Text>
            </TouchableOpacity>
        </ScrollView>
    );
}

const styles = StyleSheet.create({
    container: {
        flexGrow: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#1E1E6F',
        padding: 24,
    },
    icon: {
        marginBottom: 16,
    },
    titulo: {
        fontSize: 24,
        fontWeight: 'bold',
        color: '#fff',
        marginBottom: 24,
        textAlign: 'center',
    },
    caixaResumo: {
        backgroundColor: '#29297b',
        padding: 20,
        borderRadius: 12,
        width: '100%',
        maxWidth: 360,
        marginBottom: 24,
    },
    label: {
        fontSize: 16,
        color: '#bbb',
        marginTop: 12,
    },
    valor: {
        fontSize: 20,
        color: '#fff',
        fontWeight: 'bold',
    },
    botao: {
        backgroundColor: '#a264df',
        paddingVertical: 14,
        paddingHorizontal: 40,
        borderRadius: 30,
        marginTop: 10,
    },
    botaoTexto: {
        color: '#fff',
        fontSize: 16,
        fontWeight: 'bold',
    },
});
---------------------------------------------- app/rotas/ -----------------------------------------------------

---------------------------------------------- app/usuarios/cadastro.tsx -----------------------------------------------------
import { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, ActivityIndicator } from 'react-native';
import { useRouter } from 'expo-router';
import Toast from 'react-native-toast-message';
import api from '../../services/api';

export default function Cadastro() {
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [senha, setSenha] = useState('');
    const [loading, setLoading] = useState(false);
    const router = useRouter();

    const cadastrar = async () => {
        if (!username || !email || !senha) {
            Toast.show({ type: 'error', text1: 'Preencha todos os campos!' });
            return;
        }

        setLoading(true);

        try {
            const response = await api.post('/usuarios/register/', {
                username,
                email,
                password: senha,
            });

            console.log('Cadastro bem-sucedido:', response.data);
            Toast.show({ type: 'success', text1: 'Usuário cadastrado com sucesso!' });

            setTimeout(() => {
                setLoading(false);
                router.replace('/usuarios/login');
            }, 1500);
        } catch (error: any) {
            console.error('Erro no cadastro:', error?.response?.data || error.message);

            const data = error?.response?.data;

            const erroMsg =
                data?.email?.[0] ||
                data?.username?.[0] ||
                data?.password?.[0] ||
                data?.detail ||
                'Erro ao cadastrar.';

            Toast.show({ type: 'error', text1: erroMsg });
            setLoading(false);
        }
        console.log('URL usada:', api.defaults.baseURL);
    };

    return (
        <View style={styles.container}>
            <Text style={styles.titulo}>Criar Conta</Text>

            <TextInput
                style={styles.input}
                placeholder="Usuário"
                value={username}
                onChangeText={setUsername}
            />
            <TextInput
                style={styles.input}
                placeholder="E-mail"
                value={email}
                onChangeText={setEmail}
                keyboardType="email-address"
                autoCapitalize="none"
            />
            <TextInput
                style={styles.input}
                placeholder="Senha"
                secureTextEntry
                value={senha}
                onChangeText={setSenha}
            />

            <TouchableOpacity style={styles.botao} onPress={cadastrar} disabled={loading}>
                {loading ? (
                    <ActivityIndicator size="small" color="#a264df" />
                ) : (
                    <Text style={styles.textoBotao}>Cadastrar</Text>
                )}
            </TouchableOpacity>
            <TouchableOpacity onPress={() => router.replace('/usuarios')}>
                <Text style={styles.voltarTexto}>Voltar para a tela inicial</Text>
            </TouchableOpacity>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#1E1E6F',
        justifyContent: 'center',
        padding: 24,
    },
    titulo: {
        fontSize: 28,
        fontWeight: 'bold',
        color: '#fff',
        textAlign: 'center',
        marginBottom: 30,
    },
    input: {
        backgroundColor: '#f0f0f2',
        borderRadius: 10,
        padding: 14,
        fontSize: 16,
        marginBottom: 15,
    },
    botao: {
        backgroundColor: '#a264df',
        paddingVertical: 14,
        borderRadius: 10,
        alignItems: 'center',
        marginTop: 10,
    },
    textoBotao: {
        fontSize: 16,
        color: '#fff',
        fontWeight: 'bold',
    },
    voltarTexto: {
        marginTop: 15,
        textAlign: 'center',
        color: '#fff',
        fontSize: 14,
        textDecorationLine: 'underline',
    },
});

---------------------------------------------- app/usuarios/index.tsx -----------------------------------------------------
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';

export default function EscolhaInicial() {
    const router = useRouter();

    return (
        <View style={styles.container}>
            <Ionicons name="bicycle" size={60} color="#a264df" style={{ marginBottom: 20 }} />
            <Text style={styles.title}>Bem-vindo ao CicloMobi!</Text>
            <Text style={styles.subtitle}>Escolha uma opção para continuar</Text>

            <TouchableOpacity style={styles.button} onPress={() => router.push('/usuarios/login')}>
                <Text style={styles.buttonText}>Entrar</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.button} onPress={() => router.push('/usuarios/cadastro')}>
                <Text style={styles.buttonText}>Criar Conta</Text>
            </TouchableOpacity>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#1E1E6F',
        justifyContent: 'center',
        alignItems: 'center',
        padding: 24,
    },
    title: {
        fontSize: 26,
        fontWeight: 'bold',
        color: '#fff',
        marginBottom: 10,
        textAlign: 'center',
    },
    subtitle: {
        fontSize: 16,
        color: '#ccc',
        marginBottom: 40,
        textAlign: 'center',
    },
    button: {
        backgroundColor: '#a264df',
        paddingVertical: 14,
        paddingHorizontal: 36,
        borderRadius: 10,
        marginBottom: 16,
        width: '80%',
        alignItems: 'center',
    },
    buttonText: {
        color: '#fff',
        fontWeight: 'bold',
        fontSize: 16,
    },
});

---------------------------------------------- app/usuarios/login.tsx -----------------------------------------------------
import { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';
import Toast from 'react-native-toast-message';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import api from '../../services/api';
import { useAuth } from '../../context/AuthContext';

export default function Login() {
    const [username, setUsername] = useState('');
    const [senha, setSenha] = useState('');
    const router = useRouter();
    const { login } = useAuth();

    useEffect(() => {
        (async () => {
            const token = await AsyncStorage.getItem('accessToken');
            console.log('Token atual no AsyncStorage:', token);
        })();
    }, []);

    const logar = async () => {
        if (!username || !senha) {
            Toast.show({ type: 'error', text1: 'Preencha todos os campos!' });
            return;
        }

        try {
            const response = await api.post('/token/', {
                username: username.trim(),
                password: senha,
            });

            const { access, refresh } = response.data;

            await login(access, refresh, username.trim());

            Toast.show({ type: 'success', text1: 'Login realizado com sucesso!' });

            setTimeout(() => {
                router.replace('../(tabs)/inicio'); // Corrigido para funcionar com expo-router
            }, 1500);
        } catch (error: any) {
            console.error('Erro no login:', error);
            const erroMsg =
                error?.response?.data?.detail ||
                'Erro ao realizar login. Verifique o nome de usuário e senha.';

            Toast.show({ type: 'error', text1: erroMsg });
        }
    };

    return (
        <View style={styles.container}>
            <Text style={styles.titulo}>Entrar</Text>

            <TextInput
                style={styles.input}
                placeholder="Nome de usuário"
                value={username}
                onChangeText={setUsername}
                autoCapitalize="none"
            />

            <TextInput
                style={styles.input}
                placeholder="Senha"
                secureTextEntry
                value={senha}
                onChangeText={setSenha}
            />

            <TouchableOpacity style={styles.botao} onPress={logar}>
                <Text style={styles.textoBotao}>Entrar</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => router.replace('/usuarios')}>
                <Text style={styles.voltarTexto}>Voltar para a tela inicial</Text>
            </TouchableOpacity>
        </View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, backgroundColor: '#1E1E6F', justifyContent: 'center', padding: 24 },
    titulo: { fontSize: 28, fontWeight: 'bold', color: '#fff', textAlign: 'center', marginBottom: 30 },
    input: { backgroundColor: '#fff', borderRadius: 10, padding: 14, fontSize: 16, marginBottom: 15 },
    botao: { backgroundColor: '#a264df', paddingVertical: 14, borderRadius: 10, alignItems: 'center' },
    textoBotao: { fontSize: 16, color: '#fff', fontWeight: 'bold' },
    voltarTexto: {
        marginTop: 15,
        textAlign: 'center',
        color: '#fff',
        fontSize: 14,
        textDecorationLine: 'underline',
    },
});

------------------------------------------ services/api.ts --------------------------------------------
import axios from 'axios';
import { Platform, Alert } from 'react-native';
import Constants from 'expo-constants';
import Toast from 'react-native-toast-message';

// ================== CONFIGURAÇÕES ==================

const LOCAL_PORT = '8000';
const PC_WIFI_IP = '192.168.1.225'; // IP da máquina na rede local
const WSL_IP = '172.24.124.48';      // IP interno do WSL (somente visível do host)

// ================== DEFINIÇÃO DE BASE IP ==================

// EXPO GO em celular físico => usa o IP da rede local
// Emulador Android Studio => pode usar 10.0.2.2
// Ambiente web => localhost

let baseIP: string;

if (Platform.OS === 'web') {
  baseIP = 'localhost';
} else if (Constants.appOwnership === 'expo') {
  // Expo Go rodando no celular físico
  baseIP = PC_WIFI_IP;
} else {
  // fallback seguro para emulador local ou WSL
  const debugHost = Constants.manifest?.debuggerHost?.split(':')[0];
  baseIP = debugHost ?? WSL_IP;
}

// ================== INSTÂNCIA AXIOS ==================

const api = axios.create({
  baseURL: `http://${baseIP}:${LOCAL_PORT}/api`,
  timeout: 7000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// ================== INTERCEPTORS ==================

api.interceptors.request.use(
  async (config) => {
    const token = null; // substitua com lógica de token se tiver auth
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error('Erro na requisição:', error);
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => response,
  (error) => {
    const status = error?.response?.status;
    const detail = error?.response?.data?.detail;

    if (status === 401) {
      Alert.alert('Sessão expirada', 'Faça login novamente.');
    } else if (status >= 500) {
      Alert.alert('Erro no servidor', 'Tente novamente mais tarde.');
    } else if (status === 400 && detail) {
      Alert.alert('Erro de validação', detail);
    }

    return Promise.reject(error);
  }
);

export default api;

------------------------------------------- context/AuthContext.tsx --------------------------------------------
import { createContext, useContext, useEffect, useState } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert } from 'react-native';

interface AuthContextProps {
    isAuthenticated: boolean;
    accessToken: string | null;
    userName: string | null;
    login: (token: string, refresh: string, username: string) => Promise<void>;
    logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextProps>({
    isAuthenticated: false,
    accessToken: null,
    userName: null,
    login: async () => { },
    logout: async () => { },
});

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
    const [accessToken, setAccessToken] = useState<string | null>(null);
    const [userName, setUserName] = useState<string | null>(null);

    useEffect(() => {
        const loadFromStorage = async () => {
            const token = await AsyncStorage.getItem('accessToken');
            const username = await AsyncStorage.getItem('userName');
            if (token && username) {
                setAccessToken(token);
                setUserName(username);
            }
        };
        loadFromStorage();
    }, []);

    const login = async (token: string, refresh: string, username: string) => {
        await AsyncStorage.setItem('accessToken', token);
        await AsyncStorage.setItem('refreshToken', refresh);
        await AsyncStorage.setItem('userName', username);
        setAccessToken(token);
        setUserName(username);
    };

    const logout = async () => {
        await AsyncStorage.clear();
        setAccessToken(null);
        setUserName(null);
        Alert.alert('Logout', 'Você saiu da sua conta.');
    };

    return (
        <AuthContext.Provider
            value={{
                isAuthenticated: !!accessToken,
                accessToken,
                userName,
                login,
                logout,
            }}
        >
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);

-------------------------------------------- src/components/toastConfig.ts ------------------------------------------
import React from 'react';
import { BaseToast, ErrorToast } from 'react-native-toast-message';

export const toastConfig = {
  success: (props: any) => (
    <BaseToast
      {...props}
      style={{ borderLeftColor: 'green' }}
      contentContainerStyle={{ paddingHorizontal: 15 }}
      text1Style={{ fontSize: 16, fontWeight: '500' }}
    />
  ),

  error: (props: any) => (
    <ErrorToast
      {...props}
      style={{ borderLeftColor: 'red' }}
      contentContainerStyle={{ paddingHorizontal: 15 }}
      text1Style={{ fontSize: 16, fontWeight: '500' }}
      text2Style={{ fontSize: 14 }}
    />
  ),
};

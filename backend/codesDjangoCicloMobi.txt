.
├── config
│   ├── __init__.py
│   ├── asgi.py
│   ├── ip_address.py
│   ├── settings.py
│   ├── urls.py
│   ├── views.py
│   └── wsgi.py
├── db.sqlite3
├── estrutura1.txt
├── manage.py
├── pedaladas
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   ├── models.py
│   ├── serializers.py
│   ├── urls.py
│   └── views.py
├── rotas
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   ├── models.py
│   ├── serializers.py
│   ├── urls.py
│   └── views.py
├── urls.py
└── usuarios
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── migrations
    │   ├── __init__.py
    ├── models.py
    ├── serializers.py
    ├── tests.py
    ├── urls.py
    └── views.py

14 directories, 58 files

-------------------------------------------------- manage.py --------------------------------------------
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

-------------------------------------------------- urls.py --------------------------------------------
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/clientes/', include('clientes.urls')),  # Criaremos esse arquivo
]


--------------------------------------------- config/asgi.py --------------------------------------------------- 
"""
ASGI config for config project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_asgi_application()

--------------------------------------------- config/ip_address.py --------------------------------------------------- 
# ip_address.py
import socket

def get_ip_address():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        return s.getsockname()[0]
    except OSError:
        return socket.gethostbyname(socket.gethostname())

--------------------------------------------- config/settings.py ---------------------------------------------------
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r=c20i8s24-l_d4va9#t4lyj#7-jm2a%bgcrv6rf(j!&ny5pss'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '192.168.1.225', '127.0.0.1', '0.0.0.0']



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "usuarios",
    "rotas",
    "pedaladas",
    "corsheaders",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_ALL_ORIGINS = True
CSRF_TRUSTED_ORIGINS = ['http://192.168.1.225', 'http://0.0.0.0', 'http://127.0.0.1']

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=3),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

--------------------------------------------- config/urls.py --------------------------------------------------- 
"""
URL configuration for config project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import include, path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from .views import api_root_view

urlpatterns = [
    path("", api_root_view, name="api_root"),
    path("admin/", admin.site.urls),
    path("api/usuarios/", include("usuarios.urls")),
    path("api/rotas/", include("rotas.urls")),
    path("api/pedaladas/", include("pedaladas.urls")),
    path("api/token/", TokenObtainPairView.as_view(), name="token_obtain_pair"),
    path("api/token/refresh/", TokenRefreshView.as_view(), name="token_refresh"),
]

--------------------------------------------- config/views.py --------------------------------------------------- 
from django.http import HttpResponse

def api_root_view(request):
    html = """
    <html>
        <head>
            <title>CicloMobi API</title>
            <style>
                body { font-family: sans-serif; background: #f8f9fa; padding: 20px; }
                h1 { color: #4a4a4a; }
                ul { padding-left: 20px; }
                li { margin: 10px 0; }
                code { background: #eee; padding: 2px 4px; border-radius: 4px; }
                a { text-decoration: none; color: #007bff; }
                a:hover { text-decoration: underline; }
            </style>
        </head>
        <body>
            <h1>🌐 CicloMobi API</h1>
            <p>Rotas disponíveis:</p>
            <ul>
                <li><code>POST</code> <a href="/api/usuarios/register/">/api/usuarios/register/</a> — Criar novo usuário</li>
                <li><code>POST</code> <a href="/api/token/">/api/token/</a> — Obter token JWT</li>
                <li><code>POST</code> <a href="/api/token/refresh/">/api/token/refresh/</a> — Renovar token JWT</li>
                <li><code>GET</code> <a href="/api/usuarios/listar/">/api/usuarios/listar/</a> — Listar usuários cadastrados</li>
            </ul>
        </body>
    </html>
    """
    return HttpResponse(html)


--------------------------------------------- config/wsgi.py --------------------------------------------------- 
"""
WSGI config for config project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_wsgi_application()


--------------------------------------------- pedaladas/models.py --------------------------------------------------- 
from django.db import models
from rotas.models import Rotas


# Create your models here.
class Pedaladas(models.Model):
    rota = models.ForeignKey(Rotas, on_delete=models.CASCADE, related_name="pedaladas")
    tempo_total = models.FloatField()
    distancia_percorrida = models.TextField(default="", blank=True)
    pontos_registrados = models.TextField(default="", blank=True)
    caminho = models.JSONField(default=list, blank=True)

    def __str__(self):
        return f"{self.rota.nome} - {self.tempo_total} min"

    class Meta:
        verbose_name = "Pedalada"
        verbose_name_plural = "Pedaladas"
        ordering = ["tempo_total"]

--------------------------------------------- pedaladas/serializers.py --------------------------------------------------- 
from rest_framework import serializers
from .models import Pedaladas


class PedaladaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Pedaladas
        fields = [
            "rota",
            "tempo_total",
            "distancia_percorrida",
            "pontos_registrados",
            "caminho",
        ]

--------------------------------------------- pedaladas/urls.py --------------------------------------------------- 
from django.urls import path
from .views import criar_pedalada, listar_pedaladas

urlpatterns = [
    path("criar/", criar_pedalada, name="criar"),
    path("listar/", listar_pedaladas, name="listar_pedaladas"),
]

--------------------------------------------- pedaladas/views.py --------------------------------------------------- 
from rest_framework import generics
from .models import Pedaladas
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .serializers import PedaladaSerializer
from rest_framework import status


@api_view(["GET"])
def listar_pedaladas(request):
    pedaladas = Pedaladas.objects.all().values(
        "tempo_total", "distancia_percorrida", "pontos_registrados"
    )
    return Response(list(pedaladas))


@api_view(["POST"])
def criar_pedalada(request):
    serializer = PedaladaSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

--------------------------------------------- rotas/models.py--------------------------------------------------- 
from django.db import models


# Create your models here.
class Rotas(models.Model):
    nome = models.CharField(max_length=100)
    descricao = models.TextField()
    coordenadas = models.JSONField()

    def __str__(self):
        return self.nome

    class Meta:
        verbose_name = "Rota"
        verbose_name_plural = "Rotas"
        ordering = ["nome"]

--------------------------------------------- rotas/serializers.py --------------------------------------------------- 
from rest_framework import serializers
from .models import Rotas


class RotaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Rotas
        fields = ["id", "nome", "descricao", "coordenadas"]

--------------------------------------------- rotas/urls.py--------------------------------------------------- 
from django.urls import path
from .views import criar_rota, listar_rotas

urlpatterns = [
    path("criar/", criar_rota, name="criar"),
    path("listar/", listar_rotas, name="listar_rotas"),
]

--------------------------------------------- rotas/views.py --------------------------------------------------- 
from rest_framework import generics
from .models import Rotas
from rest_framework.decorators import api_view
from .serializers import RotaSerializer
from rest_framework.response import Response
from rest_framework import status


@api_view(["GET"])
def listar_rotas(request):
    rotas = Rotas.objects.all().values("coordenadas", "nome", "descricao")
    return Response(list(rotas))


@api_view(["POST"])
def criar_rota(request):
    serializer = RotaSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

--------------------------------------------- usuarios/admin.py --------------------------------------------------- 
from django.contrib import admin

# Register your models here.

--------------------------------------------- usuarios/apps.py --------------------------------------------------- 
from django.apps import AppConfig


class UsuariosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'usuarios'

--------------------------------------------- usuarios/models.py --------------------------------------------------- 
from django.db import models

# Create your models here.

--------------------------------------------- usuarios/serializers.py --------------------------------------------------- 
from rest_framework import serializers
from django.contrib.auth.models import User

class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'password']

    def create(self, validated_data):
        user = User(
            username=validated_data['username'],
            email=validated_data['email']
        )
        user.set_password(validated_data['password'])  # Criptografa a senha
        user.save()
        return user

--------------------------------------------- usuarios/tests.py --------------------------------------------------- 
from django.test import TestCase

# Create your tests here.

--------------------------------------------- usuarios/urls.py --------------------------------------------------- 
from django.urls import path
from .views import RegisterView, listar_usuarios

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('listar/', listar_usuarios),
]

--------------------------------------------- usuarios/views.py --------------------------------------------------- 
from rest_framework import generics
from .serializers import UserSerializer
from django.contrib.auth.models import User
from rest_framework.decorators import api_view
from rest_framework.response import Response

class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer

@api_view(['GET'])
def listar_usuarios(request):
    usuarios = User.objects.all().values('username', 'email')
    return Response(list(usuarios))